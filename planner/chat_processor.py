import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple

class ChatProcessor:
    """Processor for chat messages to extract planner items."""
    
    def __init__(self):
        """Initialize the chat processor."""
        self.current_date = datetime.now()
    
    def process_message(self, message: str) -> Tuple[List[Dict[str, Any]], str]:
        """
        Process a user message to extract planner items.
        
        Args:
            message: The user message
            
        Returns:
            A tuple containing:
            - A list of extracted planner items
            - A response message
        """
        # Extract time expressions
        items = self.extract_planner_items(message)
        
        # Generate response
        response = self.generate_response(message, items)
        
        return items, response
    
    def extract_planner_items(self, message: str) -> List[Dict[str, Any]]:
        """
        Extract planner items from a message.
        
        Args:
            message: The user message
            
        Returns:
            A list of planner items
        """
        items = []
        
        # Extract events with time
        event_patterns = [
            r'(?:–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–¥–æ–±–∞–≤–∏—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π|–¥–æ–±–∞–≤—å|—Å–æ–∑–¥–∞—Ç—å|—Å–æ–∑–¥–∞–π)\s+(?:–≤—Å—Ç—Ä–µ—á—É|—Å–æ–±—ã—Ç–∏–µ|–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ|–∑–≤–æ–Ω–æ–∫|—Å–æ–∑–≤–æ–Ω|—Å–æ–≤–µ—â–∞–Ω–∏–µ)\s+(?:—Å|–ø–æ|–Ω–∞ —Ç–µ–º—É)?\s+([^–≤]+?)\s+(?:–≤|–Ω–∞)\s+(\d{1,2}[:.]\d{2})',
            r'(?:–≤—Å—Ç—Ä–µ—á–∞|—Å–æ–±—ã—Ç–∏–µ|–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ|–∑–≤–æ–Ω–æ–∫|—Å–æ–∑–≤–æ–Ω|—Å–æ–≤–µ—â–∞–Ω–∏–µ)\s+(?:—Å|–ø–æ|–Ω–∞ —Ç–µ–º—É)?\s+([^–≤]+?)\s+(?:–≤|–Ω–∞)\s+(\d{1,2}[:.]\d{2})',
        ]
        
        for pattern in event_patterns:
            matches = re.finditer(pattern, message.lower())
            for match in matches:
                title = match.group(1).strip()
                time_str = match.group(2).replace('.', ':')
                
                # Add leading zero if needed
                if ':' in time_str and len(time_str.split(':')[0]) == 1:
                    time_str = f"0{time_str}"
                
                items.append({
                    'type': 'event',
                    'title': title.capitalize(),
                    'time': time_str,
                    'description': ''
                })
        
        # Extract tasks
        task_patterns = [
            r'(?:–¥–æ–±–∞–≤–∏—Ç—å|–¥–æ–±–∞–≤—å|—Å–æ–∑–¥–∞—Ç—å|—Å–æ–∑–¥–∞–π)\s+(?:–∑–∞–¥–∞—á—É|–∑–∞–¥–∞–Ω–∏–µ|–¥–µ–ª–æ|–ø—É–Ω–∫—Ç)\s*(?::|-)?\s*([^–Ω–∞]+?)(?:\s+–Ω–∞\s+|$)',
            r'(?:–Ω–∞–ø–æ–º–Ω–∏(?:—Ç—å)?|–Ω–µ –∑–∞–±—ã—Ç—å)\s+(?:–ø—Ä–æ|–æ|–æ–±|)?\s*([^–Ω–∞]+?)(?:\s+–Ω–∞\s+|$)',
        ]
        
        for pattern in task_patterns:
            matches = re.finditer(pattern, message.lower())
            for match in matches:
                title = match.group(1).strip()
                
                items.append({
                    'type': 'task',
                    'title': title.capitalize(),
                    'time': None,
                    'description': ''
                })
        
        # Extract notes
        note_patterns = [
            r'(?:–¥–æ–±–∞–≤–∏—Ç—å|–¥–æ–±–∞–≤—å|—Å–æ–∑–¥–∞—Ç—å|—Å–æ–∑–¥–∞–π)\s+(?:–∑–∞–º–µ—Ç–∫—É|–∑–∞–ø–∏—Å—å|–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ)\s*(?::|-)?\s*([^–Ω–∞]+?)(?:\s+–Ω–∞\s+|$)',
        ]
        
        for pattern in note_patterns:
            matches = re.finditer(pattern, message.lower())
            for match in matches:
                title = match.group(1).strip()
                
                items.append({
                    'type': 'note',
                    'title': title.capitalize(),
                    'time': None,
                    'description': ''
                })
        
        # If no items were extracted but the message seems like a task
        if not items and len(message.split()) >= 2 and not message.lower().startswith(('—á—Ç–æ', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫—Ç–æ', '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')):
            items.append({
                'type': 'task',
                'title': message.capitalize(),
                'time': None,
                'description': ''
            })
        
        return items
    
    def generate_response(self, message: str, items: List[Dict[str, Any]]) -> str:
        """
        Generate a response based on the message and extracted items.
        
        Args:
            message: The user message
            items: The extracted planner items
            
        Returns:
            A response message
        """
        if not items:
            return "–Ø –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–î–æ–±–∞–≤—å –≤—Å—Ç—Ä–µ—á—É —Å –ò–≤–∞–Ω–æ–º –≤ 15:00' –∏–ª–∏ '–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ'."
        
        response = "–Ø –¥–æ–±–∞–≤–∏–ª –≤ –≤–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫:\n\n"
        
        for item in items:
            if item['type'] == 'event':
                response += f"üìÖ **–°–æ–±—ã—Ç–∏–µ**: {item['title']}"
                if item['time']:
                    response += f" –≤ {item['time']}"
                response += "\n"
            elif item['type'] == 'task':
                response += f"‚úÖ **–ó–∞–¥–∞—á–∞**: {item['title']}\n"
            elif item['type'] == 'note':
                response += f"üìù **–ó–∞–º–µ—Ç–∫–∞**: {item['title']}\n"
        
        response += "\n–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫?"
        
        return response 